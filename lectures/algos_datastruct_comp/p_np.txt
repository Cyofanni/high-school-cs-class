*** Classi di complessità P e NP ***

*Polynomial-time algorithms*
 - Tutti gli algoritmi che abbiamo visto sono polynomial-time: 
   - su un input di size n, il loro running time (worst-case) è O(n^k)
 - Non tutti i problemi possono essere risolti in tempo polinomiale, esistono
   infatti:
    . problemi non risolvibili dai computer (problemi indecidibili, come
      l'Halting Problem)
    . problemi per i quali non è noto un algoritmo polynomial-time
 - I problemi risolvibili in tempo polinomiale sono detti "tractable", mentre
   quelli che richiedono un tempo super-polinomiale sono considerati "hard"


*Classi di complessità P e NP*
 - La classe di complessità P include i problemi risolvibili in tempo polinomiale
 - La classe di complessità NP (non-deterministic polynomial) include i problemi
   verificabili in tempo polinomiale: questo significa che, data una soluzione, è
   possibile verificare in tempo polinomiale che la soluzione sia una vera e propria
   soluzione. NP può essere definita anche come la classe dei problemi risolvibili
   in tempo polinomiale da un algoritmo non deterministico, ossia un algoritmo che
   effettua scelte "fortunate"
 - Ogni problema in P è anche in NP; P è un sottoinsieme di NP
 - La questione aperta è: P è un sottoinsieme proprio di NP?
   - molto probabilmente P != NP, ma non è dimostrato (problema aperto)
 - La classe di complessità NPC (NP-complete) include i problemi noti per 
   essere molto probabilmente parte di NP, ma non di P. Esempi di problemi
   NP-complete:
    - SAT (boolean satisfiability)
    - Traveling Salesman Problem
 - Teorema: se un problema NP-complete è in P, allora P = NP


*Traveling Salesman Problem*
 - Il TSP ("Problema del commesso viaggiatore") è molto probabilmente in NP, ma
   non in P
 - L'input del problema è un grafo pesato e un peso W. La richiesta è trovare
   un insieme di archi che connette tutti i nodi in un ciclo di peso complessivo
   massimo pari a W, dove ciascun nodo compare solo una volta
 - Sia |V| il numero di nodi di un grafo, il numero di cicli distinti cresce come
   O(|V|!)
 - Attualmente non esistono algoritmi che risolvono il TSP in tempo polinomiale