***Algebra lineare numerica - Metodo di Gauss-Seidel***

*Sistemi lineari in forma matriciale*
 - Consideriamo il sistema seguente:
    4*x0 - 2*x1 +   x2 =  9
    2*x0 + 5*x1        = -3
      x0 +   x1 - 3*x2 = -9
 - Esprimiamolo nella forma Ax = b, dove
    A = 4  -2   1
        2   5   0
        1   1  -3 
  
    x = x0
        x1
        x2

    b =  9
        -3
        -9


*Metodo di Gauss-Seidel*
 - Il metodo di Gauss-Seidel è un algoritmo iterativo per la risoluzione
   approssimata di sistemi lineari; è una variante del metodo di Jacobi
 - A differenza del metodo di Jacobi, all'iterazione n-esima, nella singola
   equazione si utilizzano già i risultati disponibili calcolati alla stessa
   iterazione
 - Converge soltanto se la matrice rispetta alcune condizioni, che
   non vedremo


*Esecuzione passo-passo*
 - Esprimere x0 in funzione di b0, x1 e x2:
     x0 = (9 + 2 * x1 - x2) / 4
 - Esprimere x1 in funzione di b1, x0 e x2:
     x1 = (-3 - 2 * x0) / 5
 - Esprimere x2 in funzione di b2, x0 e x1:
     x2 = (-9 - x0 - x1) / (-3)
 - Inizializzare casualmente il vettore x->0 (prima approssimazione),
   ad esempio così:
     x->0 = 0    (x0)
            0    (x1)
            0    (x2)
 - Calcolare x->1 (seconda approssimazione) utilizzando x->0 e
   le approssimazioni disponibili in questa stessa iterazione:
     x->1 = 
            (9 + 2 * 0 - 0) / 4 =         2.25    (x0)
            (-3 - 2 * 2.25) / 5 =        -1.5     (x1)
            (-9 - 2.25 - (-1.5)) / (-3) = 3.25    (x2)
 - Calcolare x->2 (terza approssimazione) utilizzando x->1 e
   le approssimazioni disponibili in questa stessa iterazione:
     x->2 =
            (9 + 2 * (-1.5) - 3.25) / 4 =     0.6875    (x0)
            (-3 - 2 * 0.6875) / 5 =          -0.875     (x1)
            (-9 - 0.6875 - (-0.875)) / (-3) = 2.9375    (x2)    
 - Calcolare x->3 (quarta approssimazione) utilizzando x->2 e
   le approssimazioni disponibili in questa stessa iterazione:
     x->3 =
            (9 + 2 * (-0.875) - 2.9375) / 4 =      1.078125    (x0)
            (-3 - 2 * 1.078125) / 5 =             -1.03125     (x1)
            (-9 - 1.078125 - (-1.03125)) / (-3) =  3.015625    (x2)
 - Calcolare x->4 (quinta approssimazione) utilizzando x->3 e
   le approssimazioni disponibili in questa stessa iterazione:
     x->4 =
            (9 + 2 * (-1.03125) - 3.015625) / 4 =     0.98046875    (x0)
            (-3 - 2 * 0.98046875) / 5 =              -0.9921875     (x1)
            (-9 - 0.98046875 - (-0.9921875)) / (-3) = 2.99609375    (x2)
 - Come condizione di arresto si valuta la differenza elemento per 
   elemento tra l'n-esima e la (n-1)-esima approssimazione di x.
   Se ciascun componente del vettore differenza è minore di un epsilon
   scelto (grado di precisione), l'algoritmo termina
   
  
*Implementazione*
  - https://github.com/Cyofanni/high-school-cs-class/blob/main/numerical_analysis/num_lin_alg.py