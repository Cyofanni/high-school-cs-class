***Ricerca numerica degli zeri - Metodo di Newton-Raphson***

*Metodo di Newton-Raphson*
 - Consideriamo un intervallo [a, b] in cui una funzione f(x) è
   continua ed ha un solo zero
 - Con il metodo di Newton-Raphson (o "delle tangenti"), si sostituisce
   a f(x) la retta tangente a f(a), oppure la retta tangente a f(b)
 - Questo metodo è più veloce rispetto al metodo di bisezione,
   ma non converge sempre


*Funzionamento*
 - Consideriamo la funzione f(x) = x ** 3 + 4 * x - 2, che
   ha un solo zero nell'intervallo [0, 1]
 - Consideriamo x0 = 0 come prima approssimazione dello zero di f(x)
   in [a, b]
 - La prossima approssimazione, x1, sarà l'ascissa del punto di 
   intersezione tra l'asse delle ascisse e la retta tangente a
   (x0, f(x0))
 - L'approssimazione successiva, x2, sarà l'ascissa del punto di
   intersezione tra l'asse delle ascisse e la retta tangente a
   (x1, f(x1))
 - L'approssimazione successiva, x3, sarà...


*Equazione della tangente*
 - Il coefficiente angolare della retta tangente a (x0, f(x0))
   è uguale al valore della derivata prima di f in x0:
   *  m = f'(x0)
 - L'equazione della retta tangente a (x0, f(x0)) è:
   *  y - f(x0) = m * (x - x0) => y = f(x0) + m * (x - x0)
      => y = f(x0) + m * x - m * x0
 - La x dell'intersezione tra la tangente e l'asse delle ascisse si
   trova dall'equazione ottenuta al punto precedente:
   *  f(x0) + m * x - m * x0 = 0 => x = x0 - f(x0) / m
 - Quindi, la prossima approssimazione dello zero di f(x) è:
   *  x1 = x0 - f(x0) / m


*Esecuzione passo-passo*
 - Considerare f(x) = x ** 3 + 4 * x - 2 nell'intervallo [0, 1]
 - Aprire una shell Python e definire f(x) e f1(x) (derivata prima di f(x)):
   - def f(x):
       return x ** 3 + 4 * x - 2
   - def f1(x):
       return 3 * x ** 2 + 4
 - In seguito, lanciare le istruzioni:
   * x0 = 1
   * m = f1(x0)
 - Plottare su GeoGebra la retta di equazione:
   * t1(x) = f(x0) + m * (x - x0) =>
     t1(x) = 3 + 7 * (x - 1)
   * l'intersezione tra t1(x) e l'asse delle x è la seconda approssimazione
     (x1) dello zero di f(x) in [a, b]: 0.57143
   * calcolare x1 in Python nel modo seguente:
     * x1 = x0 - f(x0) / m
 - Per il calcolo della terza approssimazione (x2):
   * m = f1(x1)
 - Plottare su GeoGebra la retta di equazione:
   * t2(x) = f(x1) + m * (x - x1) =>
     t2(x) = 0.47230 + 4.97959 * (x - 0.57143)
   * l'intersezione tra t2(x) è l'asse delle x è la terza approssimazione
     (x2) dello zero di f(x) in [a, b]: 0.47658
   * calcolare x3 in Python nel modo seguente:
     * x2 = x1 - f(x1) / m
 

*Implementazione (Python)*
 - https://github.com/Cyofanni/high-school-cs-class/blob/main/numerical_analysis/root_finding.py


*Caso divergente*
 - Considerare la funzione f(x) = x ** 3 - 3 * x ** 2 - x + 3
 - Verificare la divergenza del metodo per f(x), nell'intervallo
   [0, 2], che ha 1 solo zero
 - Eseguire passo-passo il metodo di Newton-Raphson e verificarne
   la divergenza