*** Approssimazione di funzioni ***

*Motivazioni*
 - Le calcolatrici e i linguaggi di programmazione hanno moltissime funzioni
   predefinite (logaritmo, esponenziale, funzioni goniometriche etc...)
 - Far calcolare il seno di un angolo qualsiasi ad un automa non è un problema
   banale. Ci deve essere qualche procedura che riconduce il calcolo del seno
   a qualcosa di più semplice: la valutazione di un polinomio
 - Prima delle calcolatrici e dei computer si utilizzavano tavole numeriche,
   compilate applicando manualmente i metodi a cui accenneremo


*Sviluppi in serie di Taylor-Maclaurin*
 - https://en.wikipedia.org/wiki/Taylor_series#Examples
 - Partire dalla serie di Maclaurin di e^x per implementare:
    - una funzione Python che costruisce il polinomio di grado n come stringa
      (e.g. x^0/0! + x^1/1! + x^2/2! + x^3/3! + x^4/4! + x^5/5! ...)
    - una funzione Python che valuta il polinomio di grado n in un x passato come
      parametro; in seguito, confrontare il risultato della valutazione per
      x = 0.4 con math.exp(0.4)


*Polinomio interpolatore di Lagrange*
 - Siamo ora interessati ad approssimare una funzione nel suo andamento generale,
   e non soltanto in un intorno di un certo x
 - Interpolazione polinomiale: data una funzione f di cui sono noti solo alcuni
   punti (x_i, y_i) del grafico (nodi dell'interpolazione), si vuole trovare un
   polinomio che approssimi l'andamento di f nell'intervallo contenente i punti
   (x_i, y_i)
 - La funzione polinomiale interpolatrice è unica, ma esistono diversi metodi per
   determinarla: noi vediamo la formula di Lagrange
 - https://en.wikipedia.org/wiki/Lagrange_polynomial
    - implementare una funzione Python che, data una lista di nodi, costruisce
      una stringa rappresentante il polinomio di Lagrange
    - implementare una funzione Python che, data una lista di nodi e un x, valuta
      il polinomio di Lagrange su x