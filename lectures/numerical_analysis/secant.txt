***Ricerca numerica degli zeri - Metodo delle secanti***

*Metodo delle secanti*
- Consideriamo un intervallo [a, b] in cui una funzione f(x) è
  continua ed ha un solo zero
- Con il metodo delle secanti (o "delle corde"), si sostituisce a
  f(x) la retta passante per f(a) e f(b)
- Questo metodo è più veloce rispetto al metodo di bisezione,
  ma non converge sempre


*Funzionamento*
- Consideriamo la funzione f(x) = x ** 3 + 4 * x - 2, che
  ha un solo zero nell'intervallo [0, 1]
- Consideriamo x0 = 0 e x1 = 1 come prime 2 approssimazioni
  dello zero di f(x) in [a, b]
- La prossima approssimazione, x2, sarà l'ascissa del punto di 
  intersezione tra l'asse delle ascisse e la retta che congiunge
  (x0, f(x0)) a (x1, f(x1))
- L'approssimazione successiva, x3, sarà l'ascissa del punto di
  intersezione tra l'asse delle ascisse e la retta che congiunge
  (x1, f(x1)) a (x2, f(x2))
- L'approssimazione successiva, x4, sarà...


*Equazione della secante*
- Il coefficiente angolare della retta passante per (x0, f(x0))
  e (x1, f(x1)) è:
  -  m = (f(x1) - f(x0)) / (x1 - x0)
- L'equazione della retta secante è quindi:
  -  y - f(x0) = m * (x - x0) => y = f(x0) + m * (x - x0)
     => y = f(x0) + m * x - m * x0
- La x dell'intersezione tra la secante e l'asse delle ascisse si
  trova dall'equazione ottenuta al punto precedente:
  -  f(x0) + m * x - m * x0 = 0 => x = x0 - f(x0) / m
- Quindi, la prossima approssimazione dello zero di f(x) è:
  -  x2 = x0 - f(x0) / m


*Esecuzione passo-passo*
- Considerare f(x) = x ** 3 + 4 * x - 2 nell'intervallo [0, 1]
- Aprire una shell Python e definire questa funzione:
  - def f(x):
      return x ** 3 + 4 * x - 2
- In seguito, lanciare le istruzioni:
  * x0 = 0
  * x1 = 1
  * m = (f(x1) - f(x0)) / (x1 - x0)
- Plottare su GeoGebra la retta di equazione:
  * s1(x) = f(x0) + m * (x - x0) =>
    s1(x) = -2 + 5 * x
  * l'intersezione tra s1(x) e l'asse delle x è la terza approssimazione
    (x2) dello zero di f(x) in [a, b]: 0.4
  * calcolare x2 in Python nel modo seguente:
    * x2 = x0 - f(x0) / m
- Per il calcolo della quarta approssimazione (x3):
  * m = (f(x2) - f(x1)) / (x2 - x1)
- Plottare su GeoGebra la retta di equazione:
  * s2(x) = f(x1) + m * (x - x1) =>
    s2(x) = 3 + 5.56 * (x - 1)
  * l'intersezione tra s2(x) è l'asse delle x è la quarta approssimazione
    (x3) dello zero di f(x) in [a, b]: 0.46043
  * calcolare x3 in Python nel modo seguente:
    * x3 = x1 - f(x1) / m
- Per il calcolo della quinta approssimazione (x4):
  * m = (f(x3) - f(x2)) / (x3 - x2)
- Plottare su GeoGebra la retta di equazione:
  * s3(x) = f(x2) + m * (x - x2) =>
    s3(x) = -0.33600 + 4.55617 * (x - 0.4)
  * l'intersezione tra s3(x) è l'asse delle x è la quinta approssimazione
    (x4) dello zero di f(x) in [a, b]: 0.47374
  * calcolare x3 in Python nel modo seguente:
    * x4 = x2 - f(x2) / m


*Implementazione (Python)*
- https://github.com/Cyofanni/high-school-cs-class/blob/main/numerical_analysis/root_finding.py


*Caso divergente*
 - Considerare la funzione f(x) = cos(x) + ln(x)
 - Verificare la divergenza del metodo per f(x), nell'intervallo [0.2, 2],
   che ha 1 solo zero
 - Eseguire passo-passo il metodo delle secanti e verificarne
   la divergenza dopo poche iterazioni
   
   
*Metodo di falsa posizione (regula falsi)*
 - Possiamo rendere sempre convergente il metodo delle secanti 
   "aggiustando" le approssimazioni quando necessario
 - Questo metodo, detto "di falsa posizione" ("regula falsi") consiste 
   nel verificare ad ogni iterazione la condizione f(x0) * f(x1) < 0
 - Infatti, se la funzione assume valori concordi in x0 e x1,
   sicuramente l'intervallo [x0, x1] non include la radice
 - Il metodo di falsa posizione puo' essere utilizzato in diversi
   contesti (alcuni esempi, anche molto antichi, si trovano qui:
   https://en.wikipedia.org/wiki/Regula_falsi)